// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartUptime.Api;

#nullable disable

namespace SmartUptime.Api.Migrations
{
    [DbContext(typeof(SmartUptimeDbContext))]
    partial class SmartUptimeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("SmartUptime.Api.Models.EmergencyScript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnomalyThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("AverageExecutionTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultArguments")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DowntimeThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FailureCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastExecuted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SuccessCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TriggerCondition")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EmergencyScripts");
                });

            modelBuilder.Entity("SmartUptime.Api.Models.PingResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAnomaly")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LatencyMs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusCode")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("PingResults");
                });

            modelBuilder.Entity("SmartUptime.Api.Models.ScriptExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Arguments")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorOutput")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("ExecutionTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExitCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Output")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PingResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScriptPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TriggerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PingResultId");

                    b.HasIndex("SiteId");

                    b.ToTable("ScriptExecutions");
                });

            modelBuilder.Entity("SmartUptime.Api.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("SmartUptime.Api.Models.PingResult", b =>
                {
                    b.HasOne("SmartUptime.Api.Models.Site", "Site")
                        .WithMany("PingResults")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("SmartUptime.Api.Models.ScriptExecution", b =>
                {
                    b.HasOne("SmartUptime.Api.Models.PingResult", "PingResult")
                        .WithMany()
                        .HasForeignKey("PingResultId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartUptime.Api.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PingResult");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("SmartUptime.Api.Models.Site", b =>
                {
                    b.Navigation("PingResults");
                });
#pragma warning restore 612, 618
        }
    }
}
